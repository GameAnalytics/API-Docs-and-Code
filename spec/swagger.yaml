
##################################################################################
#                       Global definitions
##################################################################################
swagger: "2.0"
info:

  title: DataTiger Management API
  description: |
    

    ## Introduction 
    The Management API allows you to setup and configure a wide range of components:
    * Applications: Every domain (i.e. your company name), can have multiple applications. Each one has a unique name and is identified by a unique ID.  
    * Workflows: Every application can have multiple workflows. Often our workflows are also referred to as user journeys. Each one has a unique name and is identified by a unique ID.  
    * A/B Tests: we believe that you should be able to test pretty much everything you are doing, therefore A/B tests can be setup for all steps of a workflow. 
    

    ## General API concepts
    * Identifiers: All managed objects are uniquely identified by a platform generated identifier.
    This is returned when an object is created or whenever it is retrieved from the database.

    * Versioning: Several entities (such as the workflows) are immutable entities, as modifying them can lead to unpredicted behaviour (e.g. modifying a workflow while 
    it is executing). Updating such an entity results in a new version, with its own unique identifier. 

    ## Authentication
    Most requests need to be authenticated. Management API allows two types of authentication:
      - API Key (Bearer token)
      - Username/Password
      
    As Swagger 2.0 specification cannot properly describe these authentication schemes, please use this section as a reference on how the authentication works.    
    
    In the following sections that describe the requests, all requests that require authentication will have an optional 'Authorization' header. The API user can either 
    use this header for API token authentication or an authenticated HTTP session for username/password authentication.     
      
    ### API Key authentication
    The API key security model is mainly targeted for backends that use the DataTiger API. Each registered user account 
    of a client is assigned a unique api key which can be used to uniquely identify the user account. 
    When a client needs to access the DataTiger API they include the assigned API with each HTTP request to the API.

    The HTTP header 'Authorization' is used to specify that the requestor holds a valid access token. 
    Every request to the API must include an Authorization header with a value of the following form:
    
    ```
      Authorization: Bearer <TokenString>
    ```
    The value after 'Bearer' is the actual API key. Note: The header name is *not* case sensitive.
    
    For instance, getting the list of all available applications using curl:
    ```
    curl -X GET \
    https://preprod.api.datatiger.com/applications \
    -H 'authorization: Bearer token_placeholder' 
    ```
    
    ### Username/Password authentication
    This is the traditional authentication scheme where a user is presented with a login form and is asked to enter a username and a password in order to identify themselves.

    Upon successful login, a session cookie is returned. Any subequent HTTP request can include the cookie in its request headers and the user will be  automatically identified 
    through the associated server-side session.
    
    The username/password pair should be passed by a POST request to the /account/login endpoint.
    
    This authentication method is mostly targeted to the DataTiger frontend components. If a customer implements their own authentication, the API key authentication 
    is more adequate.
    
    
    Here is an simple authentication example with curl:
    ```
      curl -X POST \
      https://preprod.api.datatiger.com/account/login \
        -H 'content-type: application/x-www-form-urlencoded' \
        -d 'username=username_placeholder&password=password_placeholder'\
        -c cookieFile
    ```

    After the session has been authenticated (session identifier is stored in the cookieFile), it can be used for further requests (e.g. retrieve the list of available
    applications):
    ```
      curl -X GET \
      https://preprod.api.datatiger.com/applications \
      -b cookieFile
    ```
    
    ## Workflows
    The active workflows of an application collectively define how the DataTiger platform reacts to incoming user events.  Each workflow belongs to a single application and has
    a unique name within that application.
    
    ### Workflow Versioning
    Workflows are versioned in order to allow you to edit a workflow without impacting the instances of hte workflow that are already in progress. Versions are immutable, you can always create a new version but you can never edit an existing one. Among all the versions of a workflow a single one must be assigned the ACTIVE status and this version will be instantiated by the workflow engine in response to the incoming events.
    When you create a new version it is automatically assigned the DRAFT status. A version with this status can be edited as many times as needed, it is a mutable object. A draft version however cannot be set to ACTIVE. The version must first be brought to an immutable status by publishing the version. Publishing the version will set its status to PUBLISHED and make it effectively immutable. Once a version reaches the PUBLISHED status, it can then be made the active one. 
    Only a single version can be active at any one time. To activate a different version, the active version must first be de-activated by setting its status back to PUBLISHED and then another version that is already in the PUBLISHED status can be activated instead. 
    
    For a workflow to be instantiated from a user event the following conditions must be true:
    * The workflow must not be already in progress for that user 
    * There must be a workflow version with a status of 'ACTIVE'
    * The trigger expression must evaluate to true
    
    When a workflow is activated, its steps are executed starting from the workflow starting step. The processing continues until the workflow reaches a final state or fails. Depending
    on the workflow, its execution may require waiting until some action if performed. 
    
    ### Trigger expressions
    Trigger expressions are boolean expressions over the user and event attributes (available attributes and operations are returned by the /datatypes request).
    Within a trigger expression, an event attribute is referenced using the 'event' prefix and a user attribute with the 'user' prefix.
    
    The expressions consist of the following:
    * AND, OR and NOT operators
    * parentheses
    * user and event properties such as 'user.UserId' or 'event.EventType'
    * Operators: One of ==, >, <, >=, <= 
    * Literals
      * Strings: 'strings are enclosed in single quotes'
      * DateTime: '2011-12-03T10:15:30'. The dateTimes are always expressed in UTC
      * Boolean: true / false
      * Integer: 1234, -1234
      * Float: 1.01
    * Expressions relative to now
      * user.LastActiveOn in the last 4 MINUTES
      
      
    A simple example expression is as follows:
    ```
      user.LastActiveOn in the last 1 DAYS AND event.eventType == 'UserUpdated'
    ```
    
    
    ### Workflow steps
    The workflow steps define what happens after a workflow is activated as a graph of nodes. All nodes share a set of common attributes:
    * name - gives a user friendly name to a node
    * description - useful for putting a note about the role of a specific node in the scenario
    * type - indicates the type of the node
    * transitions - From each node there's one or more labeled transitions to other nodes within the same scenario definition. This captures this
      information, like a list of pairs of the form (label, node names) 

    The node type must always be defined, and can be one of the following:
    * START - Start nodes are a special type of nodes that indicate the starting point of a workflow. There's only one START node per workflow definition and it has the special and reserved name 'START'.
    * TERMINAL - This node type indicates that the workflow ends at this point, they act like terminal points in the graph stopping any further traversing of the graph of nodes. There can be many TERMINAL 
      nodes per workflow definition and they can have custom names.
    * ACTION - This node type represents a webhook action, i.e. that a URL should be invoked as a result of the workflow reaching this step.
    * WAIT - Represents an unconditional wait action for a specified amount of time.
    * CONDITION - A condition node acts as a decision point to determine which path the workflow will follow out of multiple alternatives. 
    * WAIT_ON_CONDITION - A condition that is evaluated multiple times within a given time limit. If at any time the condition becomes true, 
      then the flow continues along the TRUE transition. Otherwise, if the time limit is passed and the condition is still false, then the FALSE transition is taken.
    * SENDGRID_EMAIL_ACTION - Action for sending an email through SendGrid.
    * MANDRILL_EMAIL_ACTION - Action for sending an email through Mandrill.
    * SNS_PUSH_ACTION - Action for sending Push notifications using Amazon SNS
     Distinct node types require specific properties to define their actions. All these are defined in the workflow types below.
    * ADWORDS_REMARKETING_ACTION - An action that adds the user to a Google Adwords remarketing user list.
     
    Each type of node has a set of predefined outgoing transitions as follows:
      
    * START
      * OK - The 'OK' transition will be followed unconditionally when encountering a START step. 
    * TERMINAL: No outgoing transitions are considered when reaching a TERMINAL. Instead the workflow is marked as completed at that point.
    * ACTION 
      * OK - Followed when the webhook call has been completed successfully
      * ERROR - Followed in case the call couldn't be made or we received a 5xx response code
    * WAIT
      * TIMEOUT - Followed when the requested delay has been reached.
    * CONDITION 
      * TRUE - Followed when the condition evaluates to TRUE
      * FALSE - Followed when the condition evaluates to FALSE
      * TIMEOUT - For conditions with a timeout setting, this will be followed when the requested delay has been reached.

     
    To put everything together here is an example workflow definition in JSON:
     ```
        {
            "name": "Example Email Workflow",
            "applicationId": 10000,        
            "triggerExpression": "event.EventType == 'DemoEmailSend'",
            "version": {
              "id": 12345,
              "name": "Welcome Flow",
              "status": "ACTIVE",
              "steps": [
                 {
                      "id": "START",
                      "name": "Start",
                      "type": "START",
                      "transitions": {
                          "OK": "SEND_EMAIL",
                          "ERROR": "FIN"
                      }
                  },
                  {
                      "id" : "SEND_EMAIL",
                      "name": "WELCOME_EMAIL",
                      "type": "SENDGRID_EMAIL_ACTION",
                      "transitions": {
                          "OK": "FIN",
                          "ERROR": "FIN_ERR"
                      },
                      "templateId": "sendGrid ID",
                      "emailTo": "${user.Email}",
                      "emailToName": "${user.FirstName}",
                      "replyTo": "your@email.com",
                      "replyToName": "Your Name",
                      "from": "your@email.com",
                      "fromName": "DataTiger",
                      "subject": "Welcome to DataTiger",
                      "trackOpen": true,
                      "trackClick": true,
                      "substitutions": [
                          {
                              "token": "%firstName%",
                              "value": "${user.FirstName}"
                          }
                      ],
                      "sandboxed": false
                  },
                  {
                      "id": "FIN",
                      "name": "FIN",
                      "type": "TERMINAL"
                  },
                  {
                      "id": "FIN_ERR",
                      "name": "FIN_ERR",
                      "type": "TERMINAL"
                  }
              ]
          }
        }
    ```     
     
    
    
    
    
    
    
  version: "1.0.0"

host: preprod.api.datatiger.com
basePath: /
schemes:
  - https

tags:
  - name: authentication
    description: System health and reporting
  - name: health
    description: System health and reporting
  - name: datatypes
    description: Supported data types, event and user schema
  - name: users
    description: Management of users
  - name: applications
    description: Management of applications
  - name: settings
    description: Management of settin gs
  - name: abtests
    description: Management of AB tests
  - name: workflows
    description: Management of workflows
  - name: reporting
    description: Reporting on workflows executions

x-tagGroups:
  - name: System calls
    tags:
      - health
      - authentication
      - settings
      - users
  - name: User journey management
    tags:
      - applications
      - workflows
      - abtests
      - reporting
  - name: Data types
    tags:
      - datatypes      



paths:

  /datatypes:
    get:
      summary: Lists the available user & event attributes
      description: |
        Lists the name and type of each attribute defined at the user and event level. This information
        is necessary to know which attributes can be included in workflow condition expressions or
        segmentation expressions.
        Each attribute is identified by a name and a data type. The supported set of data types is
        specified by the AttributeType enumeration ('type' property of the response).
      tags:
        - datatypes

      operationId: getDataDictionary
      produces:
        - application/json
      responses:
        200:
          description: Returns the data dictionaries
          schema:
            type: object
            properties:
              userAttributes:
                description: The list of user attributes
                type: array
                items:
                  $ref: '#/definitions/AttributeDefinition'
              eventAttributes:
                description: The list of event attributes
                type: array
                items:
                  $ref: '#/definitions/AttributeDefinition'
              operators:
                description: |
                  A map having as keys the available attribute types for building segmentation & condition expressions
                  and as values the list of operators that are applicable for each respective attribute type.
                  E.g. a mapping of the form AttributeType Integer -> [ 'Greater Than', 'Less Than', 'Equal',...] etc.
                type: object
                properties:
                  attributeType:
                    "$ref": "#/definitions/OperatorType"
                additionalProperties:
                  "$ref": "#/definitions/OperatorType"


##################################################################################
#                      System calls
##################################################################################
  /ping:
    get:
      summary: Checks if the server is running
      description: |
        If the server is up and running the JSON string "pong" is returned.  
      tags:
        - health
      operationId: ping
      produces:
        - application/json
      responses:
        200:
          description:  If the server is up and running the string "pong" is returned (including the double quotes)
          schema:
              type: string


  /account/login:
    post:
      summary: Authenticates an HTTP session using the user credentials (username/password). This can be used as an alternative to the API token authentication.
      description: |
        Authenticates the user using a pair of username and password.    
      tags:
        - authentication
      operationId: login
      produces:
        - text/plain
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - 
          in: formData
          name: username
          type: string
          description: The user's username
          required: true
        - 
          in: formData
          name: password
          type: string
          description: The user's password
          required: true
        
      responses:
        200:
          description:  Authentication was successful. 
          schema:
              type: string
        401:
          description:  Unauthorized. Username does not exist or username/password combination is invalid. 
          schema:
              type: string



  /account/logout:
    post:
      summary: Logs out the current user. 
      description: |
        Logs out the current user by invalidating the current session    
      tags:
        - authentication
      operationId: logout
      produces:
        - text/plain
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description:  Logout was successfull. 
          schema:
              type: string
        400:
          description:  Bad request. Potentially there is no valid autheticated session 
          schema:
              type: string




##################################################################################
#                      Client Accounts
##################################################################################

  /clientaccounts/{clientAccount}:
    parameters:
        - "$ref": "#/parameters/clientAccountParam"
        - "$ref": "#/parameters/authParam"
        
###Update an existing client account
    put:
      summary: Updates a client account.
      description: |
        Updates the client wide settings.
      tags:
        - settings
      operationId: updateClientAccount
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            "$ref": '#/definitions/ClientAccountType'
      responses:
        200:
          description: The client account was updated successfully
          schema:
            $ref: '#/definitions/ClientAccountType'
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'

#### Get information about a client account

    get:

      summary: Get information about a client account
      description: |
        Return all the client wide settings of the requested client account
      tags:
        - settings
      operationId: getClientAccount
      produces:
        - application/json
      responses:
        200:
          description: The client account
          schema:
             "$ref": '#/definitions/ClientAccountType'
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        404:
          description: The client account with the specified identifier does not exist.
          schema:
            $ref: '#/definitions/ErrorType'
        500:
          description: The update failed due to internal server error
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'



##################################################################################
#                      User Account Apis
##################################################################################

  /useraccounts:

    parameters:
      - "$ref": "#/parameters/authParam"

###Get applications 
    get:

      summary: Get users of the client account.  
      description: |
        List all the users of the client according to the (optionally) specified filters. 
      tags:
        - users
      operationId: getUsers
      parameters:
        - "$ref": "#/parameters/IdFilter"
        - "$ref": "#/parameters/usernameFilter"
        - "$ref": "#/parameters/emailFilter"
        - "$ref": "#/parameters/firstNameFilter"
        - "$ref": "#/parameters/lastNameFilter"
        - "$ref": "#/parameters/pagingPageParam"
        - "$ref": "#/parameters/pagingPerPageParam"
        - "$ref": "#/parameters/clientAccountIdParam"
      #Consumes is useless for get operations, added here just for reference
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      responses:
        200:
          description: The set of user accounts that match the filter criteria
          schema:
              type: object
              properties:
                paging:
                  $ref: '#/definitions/PagingType'
                items:
                  description: Array of the returned applications
                  type: array
                  items:
                    "$ref": '#/definitions/ApplicationType'
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'

    post:
      summary: Creates a new user account
      description: |
        Creates a new user account, under the same client account that the current user belongs. 
      tags:
        - users
      operationId: createUserAccount
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - "$ref": "#/parameters/clientAccountIdParam"
        - name: body
          in: body
          required: true
          schema:
            "$ref": '#/definitions/CreateUserAccountType'
      responses:
        201:
          description: The user was created succesfully
          schema:
            $ref: '#/definitions/UserAccountType'
          headers:
            Location:
                description: The location of the created user account
                type: string
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'

  /useraccounts/{useraccountid}:
    parameters:
        - "$ref": "#/parameters/useraccountparam"
        - "$ref": "#/parameters/authParam"
        - "$ref": "#/parameters/clientAccountIdParam"
        
###Update an existing user
    put:
      summary: Updates an user account
      description: |
        Updates the information of an existing user account.
      tags:
        - users
      operationId: updateUserAccount
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            "$ref": '#/definitions/UpdateUserAccountType'
      responses:
        200:
          description: The user was updated successfully
          schema:
            $ref: '#/definitions/UserAccountType'
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'
    delete:
      summary: Deletes a user account
      description: |
        Deletes a user account
      tags:
        - users
      operationId: deleteUserAccount 
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - test/plain
      responses:
        204:
          description: The account was deleted succesfully 
          schema:
            type: string
        404:
          description: The account was not found
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'


#### get an existing user account

    get:

      summary: Get a user account
      description: |
        Returns the identified user account
      tags:
        - users
      operationId: getUserAccount
      produces:
        - application/json
      responses:
        200:
          description: The user account
          schema:
             "$ref": '#/definitions/UserAccountType'
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        404:
          description: The user account with the specified identifier does not exist.
          schema:
            $ref: '#/definitions/ErrorType'
        500:
          description: The update failed due to internal server error
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'


##################################################################################
#                      Application APIs
##################################################################################

  /applications:

    parameters:
      - "$ref": "#/parameters/authParam"

###Get applications 
    get:

      summary: Get applications 
      description: |
        List all the applications 
      tags:
        - applications
      operationId: getApplications
      parameters:
        - "$ref": "#/parameters/nameFilter"
        - "$ref": "#/parameters/IdFilter"
        - "$ref": "#/parameters/pagingPageParam"
        - "$ref": "#/parameters/pagingPerPageParam"
        - "$ref": "#/parameters/ApplicationSortingParam"
      #Consumes is useless for get operations, added here just for reference
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      responses:
        200:
          description: The set of applications that match the filter criteria
          schema:
              type: object
              properties:
                paging:
                  $ref: '#/definitions/PagingType'
                items:
                  description: Array of the returned applications
                  type: array
                  items:
                    "$ref": '#/definitions/ApplicationType'
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'

    post:
      summary: Creates a new application
      description: |
        Creates a new application. 
      tags:
        - applications
      operationId: createApplication
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            "$ref": '#/definitions/CreateApplicationType'
      responses:
        201:
          description: The application was created successfully
          schema:
            $ref: '#/definitions/ApplicationType'
          headers:
            Location:
                description: The location of the created item
                type: string
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'

  /applications/{application}:
    parameters:
        - "$ref": "#/parameters/applicationParam"
        - "$ref": "#/parameters/authParam"
        
###Update an existing application
    put:
      summary: Updates an application
      description: |
        Updates an application by overriding the existing entry.
      tags:
        - applications
      operationId: updateApplication
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            "$ref": '#/definitions/ApplicationType'
      responses:
        200:
          description: The application was updated successfully
          schema:
            $ref: '#/definitions/ApplicationType'
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'

#### getApplication

    get:

      summary: Get an application
      description: |
        Return the identified application
      tags:
        - applications
      operationId: getApplication
      produces:
        - application/json
      responses:
        200:
          description: The application
          schema:
             "$ref": '#/definitions/ApplicationType'
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        404:
          description: The application with the specified identifier does not exist.
          schema:
            $ref: '#/definitions/ErrorType'
        500:
          description: The update failed due to internal server error
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'

##################################################################################
#                       AB tests
##################################################################################
  /applications/{application}/abtests:
    parameters:
      - "$ref": "#/parameters/applicationParam"
      - "$ref": "#/parameters/authParam"

    get:
      summary: Get the AB tests of an application
      description: |
        List the AB tests of an application
      tags:
        - abtests

      operationId: getABTestsOfApplication
      parameters:
        - "$ref": "#/parameters/nameFilter"
        - "$ref": "#/parameters/pagingPageParam"
        - "$ref": "#/parameters/pagingPerPageParam"
        - "$ref": "#/parameters/ABTestsSortingParam"

      produces:
        - application/json
      responses:
        200:
          description: The set of AB tests that match the filter criteria
          schema:
              type: object
              properties:
                paging:
                  $ref: '#/definitions/PagingType'
                items:
                  description: Array of the returned applications
                  type: array
                  items:
                    "$ref": '#/definitions/ABTestType'
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'


    post:
      summary: Creates a new AB test
      description: |
        Creates a new AB test under the specified application
      tags:
        - abtests
      operationId: createABTestInApplication
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            "$ref": '#/definitions/CreateABTestType'
      responses:
        201:
          description: The AB test was created successfully
          schema:
            $ref: '#/definitions/ABTestType'
          headers:
            Location:
                description: The location of the created item
                type: string
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'

  /applications/{application}/abtests/{abTest}:
    parameters:
      - "$ref": "#/parameters/applicationParam"
      - "$ref": "#/parameters/abTestParam"
      - "$ref": "#/parameters/authParam"

    get:
      summary: Get an AB test
      description: |
        Return an AB test, identified by the AB test ID
      tags:
        - abtests
      operationId: getABTestOfApplication
      produces:
        - application/json
      responses:
        200:
          description: The AB test
          schema:
             "$ref": '#/definitions/ABTestType'
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        404:
          description: The workflow does not exist
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'




##################################################################################
#                       Workflow APIs
##################################################################################


  /applications/{application}/workflows:
    parameters:
      - "$ref": "#/parameters/applicationParam"
      - "$ref": "#/parameters/authParam"

#### getWorkflowsOfApplication
    get:
      summary: Lists the workflows of the application
      description: |
        Lists the default versions of all workflows under the specified application that match the filtering criteria
        specified in the parameters.
#Commented, until we do have such an information page
#      externalDocs:
#        description: Further information about workflow definitions
#        url: http://www.datatiger.com
      tags:
        - workflows

      operationId: getWorkflowsOfApplication
      parameters:
        - "$ref": "#/parameters/nameFilter"
        - "$ref": "#/parameters/statusFilter"
        - "$ref": "#/parameters/dateFromFilter"
        - "$ref": "#/parameters/dateToFilter"
        - "$ref": "#/parameters/pagingPageParam"
        - "$ref": "#/parameters/pagingPerPageParam"
        - "$ref": "#/parameters/WorkflowSortingParam"
      consumes:
        - application/x-www-form-urlencoded

      produces:
        - application/json
      responses:
        200:
          description: The set of workflows that match the filtering criteria.
          schema:
              type: object
              properties:
                paging:
                  $ref: '#/definitions/PagingType'
                items:
                  description: Array of the returned applications
                  type: array
                  items:
                    "$ref": '#/definitions/WorkflowType'
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'
    post:
      summary: Creates a new workflow
      description: |
        Creates a new workflow version under the specified application.
      tags:
        - workflows
      operationId: createWorkflow
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            "$ref": '#/definitions/CreateWorkflowType'
      responses:
        201:
          description: The workflow was created successfully
          schema:
            $ref: '#/definitions/WorkflowType'
          headers:
            Location:
                description: The location of the created item
                type: string
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'
      

  /applications/{application}/workflows/actions/validate:
    parameters:
      - "$ref": "#/parameters/applicationParam"
    post:
      summary: Validates a new workflow.
      description: |
        Validates a new workflow without performing any modifications to the database.
      tags:
        - workflows
      operationId: validateWorkflowOfApplications
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            "$ref": '#/definitions/CreateWorkflowType'
      responses:
        200:
          description: The workflow is valid
          schema:
            $ref: '#/definitions/WorkflowType'
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'

  /applications/{application}/workflows/{workflow}/versions:
    parameters:
        - "$ref": "#/parameters/applicationParam"
        - "$ref": "#/parameters/workflowParam"
        - "$ref": "#/parameters/authParam"
        - "$ref": "#/parameters/nameFilter"
        - "$ref": "#/parameters/statusFilter"
    get:
      summary: Gets all the versions of a specific workflow
      description: |
        Gets all the versions of a specific workflow
      tags:
        - workflows
      operationId: getAllWorkflowVersions
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      responses:

        200:
          description: The set of workflows that match the filtering criteria.
          schema:
            type: object
            properties:
              paging:
                $ref: '#/definitions/PagingType'
              items:
                description: Array of the returned applications
                type: array
                items:
                  "$ref": '#/definitions/WorkflowType'
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        404:
          description: The workflow with the specified identifier was not found
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'

  /applications/{application}/workflows/{workflow}/versions/{version}:
    parameters:
        - "$ref": "#/parameters/applicationParam"
        - "$ref": "#/parameters/workflowParam"
        - "$ref": "#/parameters/versionParam"
        - "$ref": "#/parameters/authParam"
    get:
      summary: Gets a specific version of a workflow
      description: |
        Gets a specific version of a workflow
      tags:
        - workflows
      operationId: getWorkflowVersion
      produces:
        - application/json
      responses:
        200:
          description: The workflow
          schema:
             "$ref": '#/definitions/WorkflowType'
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        404:
          description: The workflow with the specified identifier was not found
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'
    put:
      summary: Updates a workflow version.
      description: |
        Updates a workflow version. 
      tags:
        - workflows
      operationId: updateWorkflowVersion
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            "$ref": '#/definitions/WorkflowType'
      responses:
        200:
          description: The workflow was updated successfully
          schema:
            $ref: '#/definitions/WorkflowType'
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'

    delete:
      summary: Deletes a workflow version.

      description: |
        Deletes an existing workflow. If a workflow is deleted while currently active for a user, it will be executed as normal.
      tags:
        - workflows
      operationId: deleteWorkflowVersion
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - test/plain
      responses:
        204:
          description: The workflow version was deleted succesfully
          schema:
            type: string
        404:
          description: The workflow version was not found
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'


#### getWorkflowOfApplication
  /applications/{application}/workflows/{workflow}:
    parameters:
        - "$ref": "#/parameters/applicationParam"
        - "$ref": "#/parameters/workflowParam"
    get:
      summary: Gets the default version of a specific workflow
      description: |
        Return an application workflow, identified by the workflow ID
      tags:
        - workflows
      operationId: getWorkflowOfApplication
      produces:
        - application/json
      responses:
        200:
          description: The workflow
          schema:
             "$ref": '#/definitions/WorkflowType'
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        404:
          description: The workflow with the specified identifier was not found
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'
    put:
      summary: Updates the non-versioned properties of a workflow.
      description: |
        Updates the non-versioned properties of a workflow.
      tags:
        - workflows
      operationId: updateWorkflowProperties
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            "$ref": '#/definitions/UpdateWorkflowType'
      responses:
        200:
          description: The workflow was updated successfully
          schema:
            $ref: '#/definitions/WorkflowType'
        400:
          description: Malformed request
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'

    delete:
      summary: Deletes a workflow.

      description: |
        Deletes an existing workflow. If a workflow is deleted while currently active for a user, it will be executed as normal.
      tags:
        - workflows
      operationId: deleteWorkflow
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - test/plain
      responses:
        204:
          description: The workflow was deleted succesfully
          schema:
            type: string
        404:
          description: The workflow was not found
          schema:
            $ref: '#/definitions/ErrorType'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorType'

  


## Reporting Endpoints

  /applications/{application}/workflows/{workflow}/versions/{version}/reporting:

    get:
      summary: Returns the number of executions of each step of a given workflow and time period
      description: |
        List the number of executions per workflow step for a specified time period
      tags:
        - reporting

      operationId: reportWorkflow
      parameters:
        - "$ref": "#/parameters/applicationParam"
        - "$ref": "#/parameters/workflowParam"
        - "$ref": "#/parameters/versionParam"
        - "$ref": "#/parameters/reportingFromFilter"
        - "$ref": "#/parameters/reportingUntilFilter"
        - "$ref": "#/parameters/reportingAggregationFilter"
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      responses:
        200:
          description: Upon success the response will contain the initial request parameters under the request key while the groups key will contain the table of execution counts per time unit
          schema:
            $ref: '#/definitions/ReportingResponseType'
        400:
          description: For client errors, the code indicates what was wrong about the request alongside an optinal message with a human readable explanation of what went wrong.
          schema:
            $ref: '#/definitions/ErrorType'


###Generic filtering parameters



##################################################################################
#                       Definitions of type
##################################################################################



### Core types of management API
definitions:

  NameType:
    type: string
    description: The unique name of the entity

  IdType:
    description: System wide unique identifier of the entity
    type: string

  ObjectWithIdType:
    type: object
    required:
      - id
    properties:
      id:
        $ref: '#/definitions/IdType'

  VersionType:
    type: number
    description: The version number

  ObjectWithVersionType:
    type: object
    properties:
      version:
        $ref: '#/definitions/VersionType'

  ErrorType:
    type: object
    required:
      - errorType
      - message
    properties:
      errorType:
        $ref: '#/definitions/ErrorTypeEnum'
      message:
        type: string
        description: |
          A human readable message containing more details about the error.
      innerErrors:
        description: Details about what caused this error
        type: array
        items: 
          type: object
          required:
            - errorType
            - message
          properties:
            errorType:
              $ref: '#/definitions/ErrorTypeEnum'
            errorSubtype:
              type: string
              description: An optional subtype of the error type. This can be useful to identify methods to automatically handle/display the error.
              enum:
              - UNKNOWN
              - UNPARSEABLE_REQUEST
              - MISSING_REQUIRED_FIELD
              - UNEXPECTED_FIELD
              - INVALID_REFRENCE
              - INVALID_NAME
              - CYCLICAL_WORKFLOW
            errorPath:
              type: string
              description: |
                A simple JSONPath representation of the error location. The format is of the form "$.keyName.keyName.....propertyName". Does not support
                arrays at the moment. The context (represented by $) is always the root level object that was sent by the caller.
            message:
              type: string
              description: |
                A more human readable message containing more details about the error. If we cannot extract the error
                location in the 'errorPath' format, this message may contain some human readable location information.

  ErrorTypeEnum:
    description: The top level type of the error. The type of errors continuously expands, so new enum values may be added often.
    type: string
    enum: 
      - INTERNAL_SERVER_ERROR
      - CREATE_FAILED
      - UPDATE_FAILED
      - ENTITY_NOT_FOUND
      - MALFORMED_REQUEST
      - INVALID_REQUEST 


  PagingType:
    type: object
    properties:
      total:
        type: number
        description: total results
      page:
        type: number
        description: The number of the current page
      perPage:
        type: number
        description: Number of results per page
      previous:
        type: string
        description: Link to previous page (if exists)
      next:
        type: string
        description: Link to next page (if exists)
      first:
        type: string
        description: Link to first page
      last:
        type: string
        description: Link to last page

  WorkflowStatusType:
    type: string
    description: |
      The status of the entity. Not all values might be relevant for all entities.
    enum:
      - ACTIVE
      - PUBLISHED
      - DELETED
      - DRAFT

  AttributeDefinition:
    description: Defines an attribute
    type: object
    properties:
      name:
        type: string
        description: the name of the attribute
      type:
        $ref: '#/definitions/AttributeType'

  AttributeType:
    description: Enumeration of all supported data types for user and event attributes
    type: string
    enum:
      - bool
      - text
      - integer
      - float
      - datetime

  OperatorType:
    type: array
    items:
      "$ref": "#/definitions/OperatorItemType"

  OperatorItemType:
    type: object
    properties:
      name:
        type: string
        description: a name for this operator
      value:
        type: string
        description: a value that uniquely identifies this operator



  PropertyValueType:
    type: string

### Client account types

  ClientAccountCreationType:
        type: object
        description: A client (data tiger customer)  entry that stores the client specific settings.  
        required:
          - name
          - email
        properties:
          name:
            type: string
            description: The name of the client account
          description:
            type: string
            description: A description of the client account
          email:
            type: string
            description: Primary e-mail of contact
          phone:
            type: string
            description: Primary phone of contact
          sendgridApiKey:
            type: string
            description: Sendgrid API key used for the sendgrid actions
          mandrillApiKey:
            type: string
            description: Mandrill API key used for the mandrill actions
          awsAccessKey:
            type: string
            description: AWS access key of the client's account. This is used by any actions that require to the client's customer's account (e.g. SNS Push action)
          awsSecret:
            type: string
            description: |
              AWS secret that corresponds to the AWS key of the client's account. This is used by any actions that require to the client's
              customer's account (e.g. SNS Push action)
          awsRegion:
            type: string
            description: |
              AWS region that corresponds to the AWS key of the client's account. This is used by any actions that require to the client's
              customer's account (e.g. SNS Push action)

  ClientAccountType:
    description:  A client (data tiger customer)  entry that stores the client specific settings.  
    allOf:
      - $ref: '#/definitions/ClientAccountCreationType'
      - $ref: '#/definitions/ObjectWithIdType'




### User account types
  CoreUserAccountType:
    type: object
    description: Necessary information to create a user account, apart from the password
    properties:
        username:
          type: string
          description: The username of the user account
        email:
          type: string
          description: The email of the user
        firstName:
          type: string
          description: The first name of the user 
        lastName:
          type: string
          description: The last name of the user
        contactNumber:
          type: string
          description: The contact number for the user


  UserAccountPasswordType:
    type: object
    properties:
        password:
          type: string
          description: The password of the user account


  ReturnedUserAccountType:
    description: Information that is only returned but never provided
    type: object
    required:
      - apikey
    properties:
      apikey:
          type: string
          description: The API key associated with this user
      lastlogin:
          $ref: '#/definitions/ISODateTimeType' 
      lastip:
          type: string
          description: Last access IP using this user account



  CreateUserAccountType:
    description: Necessary information to create a user account
    required:
      - username
      - email
      - password
    allOf:
      - $ref: '#/definitions/CoreUserAccountType'
      - $ref: '#/definitions/UserAccountPasswordType'

 
  UpdateUserAccountType:
    description: Necessary information to create a user account
    allOf:
      - $ref: '#/definitions/CoreUserAccountType'
      - $ref: '#/definitions/ObjectWithIdType'
      - $ref: '#/definitions/UserAccountPasswordType'


  UserAccountType:
    description: Fully populated application information
    allOf:
      - $ref: '#/definitions/CoreUserAccountType'
      - $ref: '#/definitions/ObjectWithIdType'
      - $ref: '#/definitions/ReturnedUserAccountType'





### Application  types
  CreateApplicationType:
    type: object
    description: Fully populated application information
    required:
            - name
    properties:
        name:
            "$ref" : "#/definitions/NameType"
        description:
            type: string
            description: Description of this application
        androidSnsApplicationArn:
            type: string
            description: (For the SNS Push action) The SNS ARN of the GCM application for sending Push notifications.
        iosSnsApplicationArn:
            type: string
            description: (For the SNS Push action) The SNS ARN of the IOS application for sending Push notifications.


  ApplicationType:
    description: Fully populated application information
    allOf:
      - $ref: '#/definitions/CreateApplicationType'
      - $ref: '#/definitions/ObjectWithIdType'


  ABTestRefType:
    description: The unique identifier of the AB test
    type: string

  ABTestType:
    description: |
      AB test object
    allOf:
      - $ref: '#/definitions/ObjectWithIdType'
      - $ref: '#/definitions/CreateABTestType'

  CreateABTestType:
    type: object
    description: |
      AB test object
    required:
      - name
      - application
      - testGroups
    properties:
      name:
        "$ref" : "#/definitions/NameType"
      description:
        description: The user description for this AB test
        type: string
      application:
        $ref: "#/definitions/IdType"
      seed:
        description: A seed for the AB test. AB tests with the same seeds and test sizes will result in groups with the exact same users.
        type: string
      controlGroupSize:
        description: Percentage of the population that should belong to the control group
        type: number
        format: int32
      testGroups:
        description: An array of the test groups for this AB test
        type: array
        items:
          "$ref" : "#/definitions/TestGroupType"

  TestGroupType:
    type: object
    properties:
      name:
        description: The name of the test group
        type: string
      size:
        description: The size of the testgroup as a percentage (e.g. 20 is 20% of the population)
        type: number
        format: int32


### Workflow simple top level types


  WorkflowStepTypeEnum:
    type: string
    description: Describes the type of a workflow step
    enum:
      - START
      - TERMINAL
      - ACTION
      - CONDITION
      - WAIT
      - SENDGRID_EMAIL_ACTION
      - MANDRILL_EMAIL_ACTION
      - SNS_PUSH_ACTION
      - AB_SPLIT
      - SNS_SMS

  ExpressionType:
    type: string
    description: |
      A boolean expression using the event and user dictionary.


  WorkflowStepNameType:
    type: string
    description: the name of the step. This is used to refer to the step within the workflow.

###### Workflow complex types

  CreateWorkflowType:
        type: object
        description: |
          Fully populated workflow information.
        required:
          - applicationId      
          - name
          - triggerExpression
          - version            
        properties:
            name:
                "$ref" : "#/definitions/NameType"
            applicationId:
                "$ref": "#/definitions/IdType"
            version:
                "$ref": "#/definitions/WorkflowVersionType"
            triggerExpression:
                "$ref" : "#/definitions/ExpressionType"

  NonVersionedWorkflowProperties:
    type: object
    description: |
      The non-versioned properties of a workflow.
    required:
            - applicationId            
            - name
            - triggerExpression          
    properties:
        name:
            "$ref" : "#/definitions/NameType"
        applicationId:
            "$ref": "#/definitions/IdType"
        triggerExpression:
            "$ref" : "#/definitions/ExpressionType"

  UpdateWorkflowType:
        type: object
        description: |
          The non-versioned properties of a workflow.
        allOf:
          - $ref: '#/definitions/NonVersionedWorkflowProperties'
          - $ref: '#/definitions/ObjectWithIdType'
        

  WorkflowType:
    description: Full populated workflow type, including the identifier and version number.
    allOf:
      - $ref: '#/definitions/CreateWorkflowType'
      - $ref: '#/definitions/ObjectWithIdType'


  WorkflowVersionType:
        type: object
        description: |
          A version of a workflow.
        required:
                - name
                - status
                - steps
        properties:
            name:
                "$ref" : "#/definitions/NameType"
            applicationId:
                "$ref": "#/definitions/IdType"
            status:
                "$ref" : "#/definitions/WorkflowStatusType"
            steps:
              type: array
              description: |
                A map of all the workflow steps. It's structured as a map of the
                step name to the step definition.
              items:
                "$ref": '#/definitions/WorkflowStepType'

###### Workflow steps

  # Here we have polyorphism. Much more useful if there are actual diffferent attributes, but it can be used
  # for the different type of propertis we use. The discriminator property is used to differentiate between
  # the types of steps. It's value must tbe the same as the name we give to the type

  WorkflowStepType:
    type: object
    description: |
      Generic workflow step definition for all types of steps. These extend this definition by adding
      extra properties when necessary.
    discriminator: type
    required:
      - name
      - type
    properties:
      type:
        "$ref": "#/definitions/WorkflowStepTypeEnum"
      name:
        "$ref" : "#/definitions/WorkflowStepNameType"
      description:
        type: string
      transitions:
        type: object
        description: |
          map from the transition name to the resulting workflow step.
        properties:
          transitionName:
            "$ref": "#/definitions/WorkflowStepNameType"
        additionalProperties:
            "$ref": "#/definitions/WorkflowStepNameType"

  #This has to be exactly the same as the value of the WorkflowStepType
  START:
    description: |
      The workflow starting step.
    allOf:
      - $ref : '#/definitions/WorkflowStepType'
  ACTION:
    description: |
      An action performing workflow step. The extra parameters customize the action.
    allOf:
      - $ref : '#/definitions/WorkflowStepType'
      - type: object
        properties:
          url:
            type: string
            description: the URL to invoke 
          numRetries:
            type: number
            format: int32
            description: Number of retries before permanent failure
          params:
            type: object
            description: |
              the parameters to include in the invocation. This can take two forms:
              *  A list of user attributes names (named 'attributes') to include as <name>=<value> pairs in the HTTP request. 
              *  Hardcoded name-value pairs. The values can also contain interpolation tokens of the form ${<ref>} where ref is a reference to a user attribute meaning 
                 that the whole token will be replaced by the value of the referenced attribute.  E.g. the value "Hello ${User.FirstName}" will be interpolated to 
                 "Hello Fran" if User.FirstName was "Fran" for the user associated with this workflow instance.
            properties:
              parameterName:
                type: string
            additionalProperties:
                type: string
        required:
          - url
  
  SNS_PUSH_ACTION:
    description: |
      An action for sending Push notifications using Amazon SNS. At least one of the androidRegistrationId or iosDeviceToken must be specified. Ideally both should be provided to allow 
      sending push notifications to both IOS and Android users.
    allOf:
      - $ref : '#/definitions/WorkflowStepType'
      - type: object
        properties:
          message:
            type: string
            description: The message in the notification body
          androidRegistrationId:
            type: string
            description: The GCM registration id for the user. This will normally be filled with an expression pointint to a user property that contains the registration id.
          iosDeviceToken:
            type: string
            description: The IOS device token for the user. This will normally be filled with an expression pointing to a user property that contains the device token.
        required:
          - message
  
  
  SENDGRID_EMAIL_ACTION:
    description: |
      An action for sending an e-mail through SendGrid
    allOf:
      - $ref : '#/definitions/WorkflowStepType'
      - type: object
        properties:
          templateId:
            type: string
            description: the id of the email template
          from:
            type: string
            description: the email to appear in the From field of the email
          replyTo:
            type: string
            description: the email to appear in the ReplyTo field of the email
          emailTo:
            type: string
            description: the email address to send to
          fromName:
            type: string
            description: the name/alias to appear in the From field of the email
          replyToName:
            type: string
            description: the name/alias to appear in the ReplyTo field of the email
          emailToName:
            type: string
            description: the name/alias to appear in the To field of the email
          subject:
            type: string
            description: the email's subject
          substitutions:
            type: array
            description: an array of objects that defines tokens in the email along with the associated replacement values for each token
            items:
              type: object
              properties:                
                token:
                  type: string
                  description: the token to be replaced, e.g. %NAME%
                value:
                  type: string
                  description: |
                    the value to be inserted in the email in place of the token. This can be/contain references to user attributes
                    using the syntax ${<attribute>}, e.g. ${user.Email}.  The set of possible user attributes is defined through the data dictionaries.

        required:
          - templateId
          - from
          - replyTo
  

  MANDRILL_EMAIL_ACTION:
    description: An action for sending emails through Mandrill
    allOf:
      - $ref : '#/definitions/WorkflowStepType'
      - type: object
        properties:
          fromName:
            type: string
            description: the name/alias to appear in the From field of the email
          fromEmail:
            type: string
            description: the email to appear in the From field of the email
          emailTo:
            type: string
            description: the email address to send the email to
          subject:
            type: string
            description: the subject of the email
          templateName:
            type: string
            description: the Mandrill template to use
          tags:
            type: array
            items:
              type: string
            description: the Mandrill tags to be used while sending the email
          globalMergeVars: 
            type: object
            description: The Mandrill globalMergeVars to be substituted within the email "var":"value" 
          templateContents: 
            type: object
            description: The Mandrill template contents to be substituted by Mandrill 
          trackOpens: 
            type: boolean
            description: Defines if Mandrill should track email open event
          trackClicks: 
            type: boolean
            description: Defines if Mandrill should track clicks to links within the email
  
        required:
          - fromEmail
          - emailTo
          - subject
          - templateName

  ADWORDS_REMARKETING_ACTION:
    description: An action that adds the user to a Google Adwords remarketing user list.
    allOf:
      - $ref: '#/definitions/WorkflowStepType'
      - type: object
        properties:
          userListName:
            type: string
            description: The user list name where the users will be added to. If the user list doesn\'t exist, it will be created.
          toAdd:
            type: string
            description: The information to add. Right now it has to be the user email (Google Adwords offers more options which can be added.) Usually maps to an event or user field
          userTTL:
            type: number
            description: Amount of days that the user will remain in the list. Or null if the user will not expire.
        required:
         - userListName
         - toAdd
  
  WAIT:
    description: Waits for a specified amount of time
    allOf:
      - $ref : '#/definitions/WorkflowStepType'
      - type: object
        properties:
          duration:
            type: number
            format: int32
            description: The amount of time units to wait
          timeUnit:
            type: string
            enum:
              - HOURS
              - DAYS
              - WEEKS
              - MONTHS
            description: Specifies the time unit
        required:
          - duration
          - timeUnit

  SNS_SMS:
    description: Sends a SMS through Amazon's SNS service
    allOf:
      - $ref : '#/definitions/WorkflowStepType'
      - type: object
        properties:
          phone:
            type: string
            description: The phone number where the SMS will be sent. This must include the country code.
          message:
            type: string
            description: The text of the SMS message
          maxPrice:
            type: number
            format: float
            description: |
              A double that specifies an upper limit on the price for sending this message. If a limit is specified, then SNS will cancel the delivery if the carrier is about to charge more than that.
              This is specified always in USD.
          senderId:
            type: string
            description: A text to appear as the sender of the SMS. This is supported in some countries, not all.
        required:
          - phone
          - message

  TERMINAL:
    description: Workflow ending step
    allOf:
      - $ref : '#/definitions/WorkflowStepType'

  CONDITION:
    description: |
      A conditional step. Parameters:
      * expressions: A boolean expression. According to it's evaluation one of the 'TRUE' or 'FALSE' transitions will be executed.
    allOf:
      - $ref : '#/definitions/WorkflowStepType'
      - type: object
        properties:
          expression:
            type: string
            description: the expression to evaluate. This has the same semantics as the workflow trigger expression.
          duration:
            type: number
            format: int32
            description: The amount of time units to wait
          timeUnit:
            type: string
            enum:
              - HOURS
              - DAYS
              - WEEKS
              - MONTHS
            description: Specifies the time unit
        required:
          - expression

  AB_SPLIT:
    description: |
      Splits the workflow according to the test group in which the user belongs to. Parameters:
      * abTestId: The ID of the A/B test associated with this split. The user will be classified to a test group or the control group. 
      The transition taken from this step will be the one whose name matches the test group in which the user was classified. If the
      user was classified as being part of the control group then the corresponding transition will be the one named 'Control'.
    allOf:
      - $ref : '#/definitions/WorkflowStepType'
      - type: object
        properties:
          abTestId:
            type: string
            description: The ID of the A/B test associated with this split
        required:
          - abTestId


  ReportingResponseType:
    type: object
    properties:
      request:
        $ref: '#/definitions/ReportingRequestType'
      groups:
        type: array
        items:
          $ref: '#/definitions/GroupValuesType'
    example:
      request:
        applicationId: 1234567890
        workflowId: 1234567890
        versionId: 1234567890
        start: '2017-09-01T11:00:00Z'
        end:  '2017-09-01T12:00:00Z'
        aggregation: HOUR
      groups:
        -
          step: Send_Email_Action
          values:
            -
              - '2017-09-01T11:00:00Z'
              - 100
            -
              - '2017-09-01T12:00:00Z'
              - 200

        -
          step: START
          values:
            -
              - '2017-09-01T11:00:00Z'
              - 10
            -
              - '2017-09-01T12:00:00Z'
              - 20


  GroupValuesType:
    type: object
    properties:
      step:
        type: string
      workflowId:
        type: number
      versionId:
        type: number
      values:
        type: array
        items:
          type: array
          items:
            type: string

  ReportingRequestType:
    type: object
    description: Details the properties of the request object for the reporting endpoint
    properties:
      applicationId:
        type: string
      workflowId:
        type: number
      versionId:
        type: number
      start:
        $ref: '#/definitions/ISODateTimeType'
      end:
        $ref: '#/definitions/ISODateTimeType'
      aggregation:
        $ref: '#/definitions/TimeUnitType'

  ISODateTimeType:
    description: ISODateTimeType, ISO8601 date format with optional time part. For instance, 1970-01-18T09:19:41.204+0000
    type: string
    format: date-time

  TimeUnitType:
    description: TimeUnit
    type: string
    enum: [HOURS,DAYS,WEEKS,MONTHS]


##################################################################################
#                       PARAMETERS
##################################################################################

parameters:
###Authentication
    authParam:
        name: Authorization
        in: header
        required: false
        type: string
        description: Bearer <API_Token>. Include this for API Token authentication


###Path parameters
    clientAccountParam:
        name: clientAccount
        in: path
        required: true
        type: string
        description: The identifier of the client account. The identifier 'me' always refers to the client that corresponds to the currently logged in user account. 
    useraccountparam:
        name: useraccountid
        in: path
        required: true
        type: string
        description: The identifier of the user account. The identifier 'me' always refers to the currently logged in user account. 
    applicationParam:
        name: application
        in: path
        required: true
        type: string
        description: The identifier of the application

    workflowParam:
        name: workflow
        in: path
        required: true
        type: string
        description: The identifier for the workflow

    versionParam:
        name: version
        in: path
        required: true
        type: number
        description: The identifier for the workflow version

###Generic filtering parameters

    nameFilter:
        name: name
        in: query
        required: false
        type: string
        description: Name prefix of the requested entity. If not specified, then all names are returned.

    IdFilter:
        name: id
        in: query
        required: false
        type: string
        description: The identifier to be fetched


    statusFilter:
        name: status
        in: query
        required: false
        description: One or more states to return. If not specified, then all states are returned.
        type: array
        items:
            type: string
            enum:  #Params sections cannot access definitions section in swagger 2.0 apparently. So we have to re-define enums here!!!
              - ACTIVE
              - INACTIVE
              - COMPLETED
              - DELETED
              - CANCELED
              - PENDING
              - FAILED

###Domain restriction paramters
    clientAccountIdParam:
        name: clientAccountId
        in: query
        required: false
        type: number
        description: Optional identifier of the client account. This can only be used by domain administrators that have access to multiple client accounts.


###Paging parameters
    pagingPageParam:
        name: page
        in: query
        required: false
        type: number
        description: Which page of the results to fetch
    pagingPerPageParam:
        name: perPage
        in: query
        required: false
        type: number
        description: Results per page


###User account specific parameters
    usernameFilter:
        name: username
        in: query
        required: false
        type: string
        description: Username prefix of the the user accounts

    emailFilter:
        name: email
        in: query
        required: false
        type: string
        description: Email prefix of the user accounts
    firstNameFilter:
        name: firstName
        in: query
        required: false
        type: string
        description: First name prefix of the user accounts
    lastNameFilter:
        name: lastName
        in: query
        required: false
        type: string
        description: Last name prefix of the user accounts

###Workflow specific parameters

    WorkflowSortingParam:
      name: orderby
      description: Fields to sort by. Field name is for ascending order, -fieldName (prefixed by a '-') is for descending order
      in: query
      type: array
      items:
        type: string
        enum:
          - 'name'
          - '-name'
          
    dateFromFilter:
        name: fromTime
        in: query
        required: false
        description: "Starting date of validity. Format: 'UNIX timestamp'"
        type: string

    dateToFilter:
        name: endTime
        in: query
        required: false
        description: "Ending date of validity, Format: 'UNIX timestamp'"
        type: string

    ABTestsSortingParam:
      name: orderby
      description: Fields to sort by. Field name is for ascending order, -fieldName for descending order
      in: query
      type: array
      items:
        type: string
        enum:
          - 'name'
          - '-name'

    abTestParam:
      name: abTest
      in: path
      required: true
      type: string
      description: The id of the AB test


### Application specific parameters

    ApplicationSortingParam:
      name: orderby
      description: Fields to sort by. Field name is for ascending order, -fieldName for descending order
      in: query
      type: array
      items:
        type: string
        enum:
          - 'name'
          - '-name'


# Reporting parameters
    reportingVersionFilter:
        name: version
        in: query
        required: true
        description: The ID of the workflow version from which executions will be returned
        type: number

    reportingFromFilter:
        name: from
        in: query
        required: true
        description: A ISO-8601 date that specifies the starting point from which executions will be returned
        type: string
        format: date-time

    reportingUntilFilter:
        name: until
        in: query
        required: true
        description: A ISO-8601 date-time that specifies the cut-off point after which executions will not be reported
        type: string
        format: date-time

    reportingAggregationFilter:
      name: aggregation
      in: query
      required: false
      type: string
      enum: [HOURS,DAYS,WEEKS,MONTHS]
      description: |
        The time unit on which to aggregate the reported statistics.
