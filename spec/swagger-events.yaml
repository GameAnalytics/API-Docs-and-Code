#While it makes a lot of sense to split the definition into multiple files,
#most Open API tools I've found are a horrible mess and don't work very well with that.
#Specifically:
# - code-gen parsing works fine, but doesn't include other files in the generated definition
# - swagger editor, which is the most decent error reporting there is, doesn't support multiple files
#When these tools are fixed, maybe we can design the whole thing properly

##################################################################################
#                       Global definitions
##################################################################################
swagger: "2.0"
info:

  title: DataTiger Events API
  description: |


    # General concepts
    * Identifiers: All managed objects can be uniquelly identified by a plaform generated identifier.
    This is returned when an object is created or whenever it is retrieved from the databse.
    * Versioning: Workflows are immutable entities so to making changes to a workflow requires the creation of a new version. This ensures a well defined execution model
    for cases where e.g. a workflow is modified while it is executing. As a result, the new version has its own identifier. The old identifier will now refer to an 'outdated' entry.

    # Authentication
    DataTiger offers offers the following form of authentication:
      - API Key



  version: "1.0.0"



host: preprod.api.datatiger.com
basePath: /
schemes:
  - http

tags:
  - name: events ingestion
    description: Ingestion of events
 


x-tagGroups:
  - name: Events management
    tags:
      - events ingestion

     

paths:

 

##################################################################################
#                      Events ingestion
##################################################################################

  /events:

    post:
      summary: Processes a batch of user events
      description: |
         Processes the provided batch of user events. This will result in executing all relevant workflows and
         persisting the provided user information.
      tags:
        - events ingestion
      operationId: recordEvent
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: x-api-key
          in: header
          required: true
          type: string
          description: The API key for this endpoint
        - name: body
          in: body
          required: true
          schema:
            "$ref": '#/definitions/EventBatchType'
      responses:
        200:
          description: The event was consumed








##################################################################################
#                       Definitions of type
##################################################################################

#types of events

definitions:


  EventBatchType:
    type: object
    description: A batch of events. All events in a single batch must be for the same source user.
    required:
      - userId
      - events
    properties:
      userId:
        description: The unique identifier of the user. This outside ID is used for efficient routing of the events batch to the appropriate handler without the need to parse the batch.
        type: string
      events:
        description: A list of one or more events for the specified user.
        type: array
        items:
          $ref: '#/definitions/EventType'

  EventType:
    description: The type is derived from the event meta-model which is associated with the application.
              New event types can be added / removed / modified to the meta model as necessary.

    type: object
    required:
      - UserId
      - AppId
      - EventType
      - CreatedOn
      - Version
    properties:
     UserId:
        type: string
        description: The unique identifier of the user. (same as the one provided at the top-level batch property). If the user doesn't exist yet, a new one will be created.
     AppId:
        type: string
        description: The unique application identifier.
     EventType:
        type: string
        description: |
            The type of the event. The type is derived from the event meta-model which is associated with the application.
            New event types can be added / removed / modified to the meta model as necessary.
     Version:
      type: string
      description: The version of the event schema according to which this event will be validated and parsed. The existing versions can be queried through the DATATYPES endpoints.

     CreatedOn:
      description: Event creation time
      $ref: '#/definitions/EpochMillis'

     User:
      description: The properties of the user. Depending on the event type the user field may not be necessary.
      $ref: '#/definitions/UserType'


  UserType:
    type: object
    description:  |
      User properties. The required properties UserId, Version and AppId must be provided for all users.
      Further custom properties can be specified in the user-model associated with the application.
    required:
      - UserId
      - AppId
      - Version
    properties:
      UserId:
        type: string
        description: A unique identifier of the user (same as the one on the event and batch property)
      AppId:
        type: string
        description: The unique application identifier (same as the one on the event)
      Version:
        type: string
        description: The version of the user schema according to which the properties of the user will be validated and parsed

  EpochMillis:
    description: |
      A date expressed in milliseconds since the epoch (so timezone is irrelevant).
      E.g Wed Jul 12 2017 13:57:48 GMT+0100 (Europe/London) equals 1499864268536 milliseconds
    type: number
    format: int64



