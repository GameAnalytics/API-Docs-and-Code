swagger: "2.0"
info:

  title: DataTiger Events API
  description: |
    The DataTiger Events API provides an endpoint for processing batches of customer events.
    
    The customer is responsible for sending all relevant events to this endpoint. As a response to the events, the DataTiger 
    platform can activate workflows, store user metadata and perform all necessary actions (according to how the system 
    is setup using the [management API](https://apidocs.datatiger.com/management.html "Management API") ).
    
    ## Introduction 
    The Events API is designed to ingest the maximum amount of data in the fastest and most resource efficient way possible. 
    In order to achieve this, it is running on a different architecture to the Managemet API and you will find the 
    replication of some of the information in the events. 


    ## Core Events API concepts


    ### Authentication
    All requests must be authenticated using the API key that is associated with the event API endpoint (unique per customer). 
    The API key that corresponds to the event endpoint is generated by DataTiger and given to the customer.  

    The API Key must be included in each request, using the x-api-key header:
    ```
      x-api-key: ApiToken
    ```
    
    ### Events structure
    An events API request consists of a user identifier and a list of events for this user. All events must specify a set of required
    properties (such as the event type) and, depending on event type, further properties and user information.
    
    The set of event and user properties are detailed in the message syntax below. 
    
    ## Examples
    
    Here is an example of a batch for a single user registration event:
    
    ```
    curl -X POST \
      https://preprod-events.api.datatiger.com/events \
      -H 'content-type: application/json' \
      -H 'x-api-key: ...replaceTheApiKeyHere...' \
      -d '{
      "userId": "uniqueUserId_0904295",
      "events": [
        {
          "UserId": "uniqueUserId_0904295",
          "AppId": "10000",
          "EventType": "UserRegistration",
          "CreatedOn": 1504287529000,
          "User": {
            "UserId": "uniqueUserId_0904295",
            "AppId": "10000",
            "Version": "1.0",
            "LastActiveOn": 1504287529001
          }
        }
      ]
    }'
    ```
    
      
    
  version: "1.0.0"

host: preprod-events.api.datatiger.com
basePath: /
schemes:
  - https

tags:
  - name: events ingestion
    description: Ingestion of events
 

x-tagGroups:
  - name: Events management
    tags:
      - events ingestion

     

paths:

 

##################################################################################
#                      Events ingestion
##################################################################################

  /events:

    post:
      summary: Ingestion of a batch of events
      description: |
         Processes a batch of user events, activates/progresses the relevant workflows and persists the provided user information.
      tags:
        - events ingestion
      operationId: recordEvent
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            "$ref": '#/definitions/EventBatchType'
        - "$ref": "#/parameters/authParam"
      responses:
        200:
          description: The event was consumed. This means it was added successfully to the event queue. It doesn't mean it was correct or could be processed, as this is an asynchronous operation. 





##################################################################################
#                       Definitions of type
##################################################################################

#types of events

definitions:


  EventBatchType:
    type: object
    description: A batch of events. All events in a single batch must be for the same user (as defined by the userId property)
    required:
      - userId
      - events
    properties:
      userId:
        description: |
          The unique user identifier that is associated with this batch. The individual events also contain the same 
          user identifier, but this top level identifier ensures the deterministic and timely processing of events without the need to
          parse the whole batch. Deterministic means that no events for the same user will be processed 
          in parallel, so for a given sequence of events the outcome will always be the same.
        type: string
      events:
        description: A list of one or more events for the specified user.
        type: array
        items:
          $ref: '#/definitions/BaseExternalEventType'


  EventTypeType:
    type: string
    description: The type of an event
    enum:
      - UserRegistration
      - UserUpdated

  BaseExternalEventType:
    description: |
      The representation of an event. Several properties (userId, AppId, EventType, CreatedOn, Version, User) are required for all events.
      Depending on the event type, further required or optional properties may be available.
    type: object
    discriminator: EventType
    required:
      - UserId
      - AppId
      - EventType
      - CreatedOn
      - Version
      - User
    properties:
     UserId:
        type: string
        description: The unique identifier of the user. If the user doesn't exist yet, a new entry will be created.
     AppId:
        type: string
        description: The unique identifier of the application. This is returned by the management API when creating a DataTiger application.
     EventType:
       "$ref": "#/definitions/EventTypeType"
     Version:
      type: string
      description: |
        The version of the event schema according to which this event will be validated and parsed.
        The existing versions can be queried through the management API /datatypes resource.
     CreatedOn:
      description: Event creation time
      $ref: '#/definitions/EpochMillis'
     User:
      description: User properties. 
      $ref: '#/definitions/UserType'

  UserRegistration:
    description: Event type for a new user registration
    allOf:
      - $ref : '#/definitions/BaseExternalEventType'
  
  UserUpdated:
    description: Event type for updating a user's data
    allOf:
      - $ref : '#/definitions/BaseExternalEventType'
  
  UserType:
    type: object
    description:  |
      User properties. Properties UserId, Version and AppId must always be specified. If further properties are specified, they 
      will result in updating the user information in the persistence layer.
    required:
      - UserId
      - AppId
      - Version
    properties:
      UserId:
        type: string
        description: A unique identifier of the user (same as the one on the event batch / event level)
      AppId:
        type: string
        description: The unique application identifier (same as the one on the event level)
      Timezone:
        type: string
        description: |
          The timezone the user resides in. This must be provided to allow timezone sensitive operations such as avoiding nighttim delivery etc.
          There multiple expected formats recognized as listed below. The 'region/city' formats are preferable as they allow 
          automatic adjustment during daylight saving periods. 
          * Z
          * +01
          * -01
          * +01:30
          * GMT+01
          * UTC
          * EST
          * Europe/Athens
          * Europe/London
        
      Version:
        type: string
        description: The version of the user schema according to which the properties of the user will be validated and parsed
      IPAddress:
        type: string
        description: |
          The IP address of the user. This is used to efficiently route the user events
          so that they are processed in a timely and deterministic way (by ensuring 
          without to ensure efficient processing and sequential
          processing of the events for the same user without the need to parse the whole batch
          (i.e. no two batches with the same user ID will be prn: Last IP address 
      FirstName:
        type: string
        description: User first name
      LastName:
        type: string
        description: User last name
      Company:
        type: string
        description: User company name
      PhoneNumber:
        type: string
        description: User phone number
      Country:
        type: string
        description: User country 
      Industry:
        type: string
        description: User industry
      Role:
        type: string
        description: User role
      SlackId:
        type: string
        description: User slack id
      RequestCallback:
        type: boolean
        description: Whether the user has request callback
      LastActiveOn: 
        description: Last activity timestamp
        $ref: '#/definitions/EpochMillis'
      OpenedWelcomeCampaign:
        type: boolean
        description: Whether the user has opened the welcome campaign


  EpochMillis:
    description: |
      A timestamp expressed in milliseconds since the epoch
      E.g Wed Jul 12 2017 13:57:48 GMT+0100 (Europe/London) equals 1499864268536 milliseconds. 
      Please note that as the epoch is defined in GMT, this representation is timezone independent. 
    type: number
    format: int64

parameters:
  ###Authentication
    authParam:
        name: x-api-key
        in: header
        required: true
        type: string
        description: The API key for this endpoint


