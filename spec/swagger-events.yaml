swagger: "2.0"
info:

  title: DataTiger Events API
  description: |
    The DataTiger Events API provides an endpoint for processing batches of customer events.
    
    The customer is responsible for sending all relevant events to this endpoint. As a response to the events, the DataTiger 
    platform can activate workflows, store user metadata and perform all necessary actions as set-up by the management API.
    
    ## Authentication
    All requests must be authenticated using the API key that is associated with the event API endpoint (unique per customer). 
    The API key that corresponds to the event end point is generated by DataTiger and given to the customer. 

    The API Key must be included in each request, using the x-api-key header:
    ```
      x-api-key: ApiToken
    ```
    
    ## Structure of even batch message
     
     
     An API request consists of a user identifier and a list of events for this user. Each event
     must contain a minimum set of predefined attributes for the event itself and the associated user.
     
     Additional customer specific properties can be included in both event and user objects.
      
     
     ### Event structure
     An event batch consists of an array of events. Each event has a well-defined type, which 
     associates it to the relevant event schema.  

     Each customer is free to use their own types, as far as they do not conflict with 
     the internal system event types:
      
     * ActionCompleted
     * ActionFailed
     * DelayedEvent

     The minimum set of properties that every event must contain includes the following:
     
     * The version of the event schema according to which this event will be validated and parsed.
     * The identifier of the relevant application
     * The identifier of the user
     * The type of the event
     * The time the event was created
     * User properties, consisting of both predefined and customer specific user properties

     
     ### Structure of the user information
     The user object contains several essential user properties, as well as, customer specific properties.
     
     The required properties are:
     
     * UserId:  The unique identifier of the user. This has to be unique per application
     * AppId:   The identifier of the application
     * Version: The version of the user schema according to which the properties of the user will be validated and parsed
    

  version: "1.0.0"

host: f92bwvk0k.execute-api.eu-west-1.amazonaws.com
basePath: /LATEST
schemes:
  - https

tags:
  - name: events ingestion
    description: Ingestion of events
 


x-tagGroups:
  - name: Events management
    tags:
      - events ingestion

     

paths:

 

##################################################################################
#                      Events ingestion
##################################################################################

  /events:

    post:
      summary: Processes a batch of user events
      description: |
         Processes the provided batch of user events. This will result in executing all relevant workflows and
         persisting the provided user information.
      tags:
        - events ingestion
      operationId: recordEvent
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            "$ref": '#/definitions/EventBatchType'
        - "$ref": "#/parameters/authParam"
      responses:
        200:
          description: The event was consumed








##################################################################################
#                       Definitions of type
##################################################################################

#types of events

definitions:


  EventBatchType:
    type: object
    description: A batch of events. All events in a single batch must be for the same source user.
    required:
      - userId
      - events
    properties:
      userId:
        description: The unique identifier of the user. This outside ID is used for efficient routing of the events batch to the appropriate handler without the need to parse the batch.
        type: string
      events:
        description: A list of one or more events for the specified user.
        type: array
        items:
          $ref: '#/definitions/EventType'

  EventType:
    description: The type is derived from the event meta-model which is associated with the application.
              New event types can be added / removed / modified to the meta model as necessary.

    type: object
    required:
      - UserId
      - AppId
      - EventType
      - CreatedOn
      - Version
    properties:
     UserId:
        type: string
        description: The unique identifier of the user. (same as the one provided at the top-level batch property). If the user doesn't exist yet, a new one will be created.
     AppId:
        type: string
        description: The unique application identifier.
     EventType:
        type: string
        description: |
            The type of the event. The type is derived from the event meta-model which is associated with the application.
            New event types can be added / removed / modified to the meta model as necessary.
     Version:
      type: string
      description: The version of the event schema according to which this event will be validated and parsed. The existing versions can be queried through the DATATYPES endpoints.

     CreatedOn:
      description: Event creation time
      $ref: '#/definitions/EpochMillis'

     User:
      description: The properties of the user. Depending on the event type the user field may not be necessary.
      $ref: '#/definitions/UserType'


  UserType:
    type: object
    description:  |
      User properties. The required properties UserId, Version and AppId must be provided for all users.
      Further custom properties can be specified in the user-model associated with the application.
    required:
      - UserId
      - AppId
      - Version
    properties:
      UserId:
        type: string
        description: A unique identifier of the user (same as the one on the event and batch property)
      AppId:
        type: string
        description: The unique application identifier (same as the one on the event)
      Version:
        type: string
        description: The version of the user schema according to which the properties of the user will be validated and parsed

  EpochMillis:
    description: |
      A date expressed in milliseconds since the epoch (so timezone is irrelevant).
      E.g Wed Jul 12 2017 13:57:48 GMT+0100 (Europe/London) equals 1499864268536 milliseconds
    type: number
    format: int64

parameters:
  ###Authentication
    authParam:
        name: x-api-key
        in: header
        required: true
        type: string
        description: The API key for this endpoint


